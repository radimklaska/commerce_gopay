<?php

/**
 * Implements hook_requirements().
 */
function commerce_gopay_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if (!function_exists('mcrypt_module_open')) {
    $requirements['commerce_gopay_mcrypt'] = array(
      'severity' => REQUIREMENT_ERROR,
      'title' => $t("GoPay mcrypt"),
      'description' => $t("GoPay payment methods require PHP <a href='!ext_url'>@extension</a> extension enabled.", array('!ext_url' => 'http://php.net/manual/en/book.mcrypt.php', '@extension' => 'mcrypt')),
    );
  }

  if (!class_exists('SoapClient')) {
    $requirements['commerce_gopay_soap'] = array(
      'severity' => REQUIREMENT_ERROR,
      'title' => $t("GoPay SOAP"),
      'description' => $t("GoPay payment methods require PHP <a href='!ext_url'>@extension</a> extension enabled.", array('!ext_url' => 'http://www.php.net/manual/en/book.soap.php', '@extension' => 'SOAP')),
    );
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function commerce_gopay_schema() {
  $schema = array();

  $schema['commerce_gopay_ipn'] = array(
    'description' => 'Stores processed IPNs.',
    'fields' => array(
      'ipn_id' => array(
        'description' => 'Serial numeric ID of the IPN in the local database.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'order_id' => array(
        'description' => 'The order ID the payment belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'variable_symbol' => array(
        'description' => 'The order ID for GoPay.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'payment_session_id' => array(
        'description' => 'The GoPay payment session ID.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
      'product_name' => array(
        'description' => 'The product description saved in the GoPay.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'total_price' => array(
        'description' => 'The total price in cents (x100).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'payment_status' => array(
        'description' => 'The GoPay payment status.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'payment_method' => array(
        'description' => 'The method of the payment.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'transaction_id' => array(
        'description' => 'The payment transaction ID the payment belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the IPN was received.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the IPN was last updated.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'test_ipn' => array(
        'description' => 'Boolean indicating whether or not this was a test IPN sent by the Sandbox.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('ipn_id'),
    'indexes' => array(
      'order_id' => array('order_id'),
    ),
    'foreign keys' => array(
      'order_id' => array(
        'table' => 'commerce_order',
        'columns'=> array('order_id' => 'order_id'),
      ),
      'transaction_id' => array(
        'table' => 'commerce_payment_transaction',
        'columns'=> array('payment_id' => 'payment_id'),
      ),
    ),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
//function commerce_gopay_uninstall() {
//  db_update('commerce_order')
//    ->fields(array('locked' => 0))
//    ->condition('order_status_id', 'gopay_pending')
//    ->execute();
//
//  db_delete('variable')
//    ->condition('name', 'commerce_gopay_%', 'LIKE')
//    ->execute();
//}