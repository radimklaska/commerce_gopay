<?php

/**
 * GoPay provider currently accepts transactions in CZK only.
 */
define('COMMERCE_GOPAY_CURRENCY', 'CZK');

/**
 * Registration email.
 */
define('COMMERCE_GOPAY_REGISTRATION_EMAIL', 'gopay@klaska.net'); 

/**
* Implements hook_menu();
*/
function commerce_gopay_menu() {
  $items = array();

  $items['soap/gopay/notify'] = array(
    'title' => 'GoPay SOAP payment notification',
    'page callback' => 'commerce_gopay_soap_notify',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_gopay.pages.inc',
  );
  
  $items['admin/commerce/config/payment-methods/manage/commerce_payment_gopay/register'] = array(
    'title' => 'Module registration',
    'description' => t('Optional module registration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_gopay_registration_form'),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_gopay.pages.registration.inc',
  );

  return $items;
}

/**
 * Payment method callback: settings form.
 *
 * Returns form elements for the payment method's settings form included
 * as part of the payment method's enabling action in Rules
 *
 * == NEEDS REVIEW!!!
 */
function commerce_gopay_settings_form($settings = NULL) {
  $form = array();
  
  // load default settings
  $settings = (array) $settings + commerce_gopay_default_settings();
    
  // Get and cache or get from cache all available channels
  $settings['all_channels'] = cache_get('commerce_gopay_channel_list:all');
  if (!$settings['all_channels']) {
    $settings['all_channels'] = array();
    $payment_method_list = GopaySoap::paymentMethodList();
    foreach ($payment_method_list as &$payment_method) {
      $pm = new stdClass();
      $pm->logo = $payment_method->logo;
      $pm->paymentMethod = $payment_method->paymentMethod;
      $pm->code = $payment_method->code;
      $pm->offline = $payment_method->offline;
      $settings['all_channels'][$payment_method->code] = $pm;
    }
    // 10 minutes = 600 seconds
    $expire = REQUEST_TIME + 10;
    cache_set('commerce_gopay_channel_list:all', $settings['all_channels'], $expire);
  }

  
  // Get enabled channels
  if (!$settings['enabled_channels']) {
    $settings['enabled_channels'] = $settings['all_channels'];
    $settings['all_channels'] = array_filter($settings['all_channels']);
    $settings['enabled_channels'] =  array_intersect_key($payment_method_list, $settings['all_channels']);
  }  
  
  // Prepare data for table with all channels
  $header = array(t('Logo'), t('Payment method'), t('Code'), t('Offline'));
  foreach ($settings['all_channels'] as &$payment_method) {
    $row = array();
    $row[] = '<img src="' . $payment_method->logo . '">';
    $row[] = $payment_method->paymentMethod;
    $row[] = $payment_method->code;
    $row[] = ($payment_method->offline == 1) ? t('yes') : t('no');
    $options[$payment_method->code] = $row;
  }
  
  // The form itself
  $form['registration'] = array(
    '#type' => 'item',
    '#title' => t('Optional module registration'),
    '#markup' => $settings['registration'] ?
      t("Done. Thank you for your support! Do you want to <a href='@register-url'>change something</a>?", array('@register-url' => url('admin/commerce/config/payment-methods/manage/commerce_payment_gopay/register'))) :
      t("You haven't <a href='@register-url'>registered the site</a> yet.", array('@register-url' => url('admin/commerce/config/payment-methods/manage/commerce_payment_gopay/register'))),
  );

  $form['notify_url'] = array(
    '#type' => 'item',
    '#title' => t('Notification URL'),
    '#markup' => '<pre>' . url('soap/gopay/notify', array('absolute' => TRUE)) . '</pre><div class="description">' . t('Use this URL as the notification URL during the GoPay registration process.') . '</div>',
  );

  $form['goid'] = array(
    '#type' => 'textfield',
    '#title' => t('GoId'),
    '#description' => t('The GoPay ID of the GoPay account you want to receive payments.'),
    '#default_value' => $settings['goid'],
  );

  $form['secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret'),
    '#description' => t('The GoPay secret of the GoPay account you want to receive payments.'),
    '#default_value' => $settings['secret'],
  );

  $form['server'] = array(
    '#type' => 'select',
    '#title' => t('GoPay server'),
    '#description' => t('Sign up for and use a Sandbox account for testing.'),
    '#options' => array(
      GopayConfig::TEST => ('Testing'),
      GopayConfig::PROD => ('Production'),
    ),
    '#default_value' => $settings['server'],
  );

  $form['debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show debug info in the logs.'),
    '#default_value' => $settings['debug'],
  );

  $form['gateway'] = array(
    '#type' => 'select',
    '#title' => t('Interface'),
    '#description' => t('Which method to use when communicating with the GoPay server. Currently only SOAP interface is supported.'),
    '#options' => array(
      'soap' => t('SOAP'),
    ),
    '#default_value' => $settings['gateway'],
  );

  $form['address'] = array(
    '#type' => 'radios',
    '#title' => t('Address selection'),
    '#options' => array(
      'billing' => t('Send billing address to GoPay.'),
      'delivery' => t('Send shipping address to GoPay.'),
    ),
    '#default_value' => $settings['address'],
  );

  $form['checkout_button'] = array(
    '#type' => 'textfield',
    '#title' => t('Order review submit button text'),
    '#description' => t('Provide GoPay specific text for the submit button on the order review page.'),
    '#default_value' => $settings['checkout_button'],
  );

  // ToDo: Can we merge following two tables into one?
  $form['enabled_channels_title'] = array(
    '#prefix' => '<label>',
    '#markup' => t('Available payment channels'),
    '#suffix' => '</label>',
  );
  $form['enabled_channels'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' =>  t('Payment channels not available'),
    '#multiple' => TRUE,
    '#js_select' => TRUE,
    '#default_value' => $settings['enabled_channels'],
  );
  
  //ToDo: Preselected payment channel can be set to disabled channel (from above table)
  $form['preselect_channel_title'] = array(
    '#prefix' => '<label>',
    '#markup' => t('Preselected payment channel'),
    '#suffix' => '</label>',
  );
  $form['preselect_channel'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' =>  t('Payment channels not available'),
    '#description' => t('This channel will be preselected when customer is redirected to the GoPay gateway.'),
    '#multiple' => FALSE,
    '#js_select' => FALSE,
    '#default_value' => $settings['preselect_channel'],
  );
  
  // Display warnings on payment method settings page
  if ($settings['server'] === GopayConfig::TEST) {
    drupal_set_message(t("Because you are using debug mode, all GoPay transaction will pass."), 'warning');
  }
  
  if (!$settings['enabled_channels']) {
    drupal_set_message(t("GoPay payment method is enabled on checkout, but there is no allowed payment channels. Allow at least one channel to get rid of this warning." . ' ' . l(t('Payment channels list'),'admin/commerce/config/payment-methods/manage/commerce_payment_gopay/list_methods')), 'warning');
  }
  
  if (!($settings['goid'] && $settings['secret'])) {
    drupal_set_message(t("GoPay payment method is enabled, but GoPay ID or secret key isn't provided. Please provide GoPay ID and shared secret to get rid of this warning."), 'error');
  }

  return $form;
}

/**
 * Loads a stored IPN by ID.
 *
 * @param $id
 *   The ID of the IPN to load.
 * @param $type
 *   The type of ID you've specified, either the serial numeric ipn_id or the
 *     actual GoPay payment_session_id. Defaults to payment_session_id.
 *
 * @return
 *   The original IPN with some meta data related to local processing.
 */
function commerce_gopay_ipn_load($id, $type = 'payment_session_id') {
  return db_select('commerce_gopay_ipn', 'cgi')
    ->fields('cgi')
    ->condition('cgi.' . $type, $id)
    ->execute()
    ->fetchAssoc();
}

/**
 * Saves an IPN with some meta data related to local processing.
 *
 * @param $ipn
 *   An IPN array with additional parameters for the order_id and Commerce
 *     Payment transaction_id associated with the IPN.
 *
 * @return
 *   The operation performed by drupal_write_record() on save; since the IPN is
 *     received by reference, it will also contain the serial numeric ipn_id
 *     used locally.
 */
function commerce_gopay_ipn_save(&$ipn) {
  if (!empty($ipn['ipn_id']) && commerce_gopay_ipn_load($ipn['payment_session_id'])) {
    $ipn['changed'] = REQUEST_TIME;

    return drupal_write_record('commerce_gopay_ipn', $ipn, 'ipn_id');
  }
  else {
    $ipn['created'] = REQUEST_TIME;
    $ipn['changed'] = REQUEST_TIME;

    return drupal_write_record('commerce_gopay_ipn', $ipn);
  }

  return $ipn;
}

/**
 * Deletes a stored IPN by ID.
 *
 * @param $id
 *   The ID of the IPN to delete.
 * @param $type
 *   The type of ID you've specified, either the serial numeric ipn_id or the
 *     actual GoPay payment_session_id. Defaults to payment_session_id.
 */
function commerce_gopay_ipn_delete($id, $type = 'payment_session_id') {
  db_delete('commerce_gopay_ipn')
    ->condition($type, $id)
    ->execute();
}

/**
 * Generate a unique variable symbol based on the Order ID and timestamp.
 */
function commerce_gopay_variable_symbol($order) {
  return $order->order_id . '-' . REQUEST_TIME;	
}

function commerce_gopay_payment_info_from_url() {
  if (!isset($_GET['paymentSessionId'])) {
    return array();
  }
  
  return array(
    'payment_session_id' => $_GET['paymentSessionId'],
    'go_id' => $_GET['eshopGoId'],
    'variable_symbol' => $_GET['variableSymbol'],
    'encrypted_signature' => $_GET['encryptedSignature'],
  );
}

/**
 * Get a payment status and message based on the GoPay status.
 * 
 * @param $ipn
 *   Received GoPay status ID.
 */
function commerce_gopay_feedback_status($ipn, &$transaction) {
  switch ($ipn['payment_status']) {
    case 'PAYMENT_DONE':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t("The payment has completed.");
      break;

    case 'CANCELED':
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('The payment was canceled.');
      break;

    case 'TIMEOUTED':
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('The payment was canceled.');
      break;

    case 'WAITING':
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      $transaction->message = t('Pending.');
      break;
  }
}

/**
 * Implements hook_mail().
 */
function commerce_gopay_mail($key, &$message, $params) {
  switch ($key) {
    case 'register':
      $message['subject'] = 'Registration: ' . check_plain($params['eshop_url']);
    
      if ($params['send_copy']) {
        $message['headers']['bcc'] = $params['email'];
      }
    
      $message['body'][] = 'GOID: ' . ($params['goid'] ? check_plain($params['goid']) : '--') . "\n" .
                         'URL: ' . check_plain($params['eshop_url']) . "\n" .
                         'EMAIL: ' . check_plain($params['email']) . "\n" .
                         'NAME: ' . check_plain($params['first_name']) . "\n" .
                         'SURNAME: ' . check_plain($params['second_name']) . "\n\n" .
                         'REGISTERED: ' . format_date($params['registered'], 'custom', 'Y-m-d H:i:s') . ' / ' . check_plain($params['registered']) . "\n" .
                         'STATUS: ' . (uc_gopay_setting('registration') ? 'UPDATE' : 'NEW');
      break;
  }
}

/**
 * Returns the default settings for the GoPay payment method.
 *
 * NEEDS REVIEW!!!
 */
function commerce_gopay_default_settings() {
  return array(
    'secret' => '',
    'goid' => '',
    'success_url' => url('checkout/gopay/payment_success', array('absolute' => TRUE)),
    'failed_url' => url('checkout/gopay/payment_failed', array('absolute' => TRUE)),
    'gateway' => 'soap',
    'debug' => TRUE,
    'server' => GopayConfig::TEST,
    'preferred_channel' => 'cz_gp_w',
    'all_channels' => '',
    'enabled_channels' => '',
    'checkout_button' => t('Submit Order'),
    'address' => 'billing',
    'registration' => variable_get('commerce_gopay_registration', FALSE),
    'registration_data' => variable_get('commerce_gopay_registration_data', array(
                               'first_name' => '',
                               'second_name' => '',
                               'eshop_url' => '',
                               'email' => '',
                               'goid' => '',
                               'last_update' => '',
                           )),
    'preselect_channel' => '',
  );
}